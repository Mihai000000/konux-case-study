// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: log.proto

#ifndef PROTOBUF_log_2eproto__INCLUDED
#define PROTOBUF_log_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace company {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_log_2eproto();
void protobuf_AssignDesc_log_2eproto();
void protobuf_ShutdownFile_log_2eproto();

class Events;
class Events_Event;

// ===================================================================

class Events_Event : public ::google::protobuf::Message {
 public:
  Events_Event();
  virtual ~Events_Event();

  Events_Event(const Events_Event& from);

  inline Events_Event& operator=(const Events_Event& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Events_Event& default_instance();

  void Swap(Events_Event* other);

  // implements Message ----------------------------------------------

  Events_Event* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Events_Event& from);
  void MergeFrom(const Events_Event& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);

  // required int64 userId = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::int64 userid() const;
  inline void set_userid(::google::protobuf::int64 value);

  // required string event = 3;
  inline bool has_event() const;
  inline void clear_event();
  static const int kEventFieldNumber = 3;
  inline const ::std::string& event() const;
  inline void set_event(const ::std::string& value);
  inline void set_event(const char* value);
  inline void set_event(const char* value, size_t size);
  inline ::std::string* mutable_event();
  inline ::std::string* release_event();
  inline void set_allocated_event(::std::string* event);

  // @@protoc_insertion_point(class_scope:company.Events.Event)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_event();
  inline void clear_has_event();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int64 userid_;
  ::std::string* event_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_log_2eproto();
  friend void protobuf_AssignDesc_log_2eproto();
  friend void protobuf_ShutdownFile_log_2eproto();

  void InitAsDefaultInstance();
  static Events_Event* default_instance_;
};
// -------------------------------------------------------------------

class Events : public ::google::protobuf::Message {
 public:
  Events();
  virtual ~Events();

  Events(const Events& from);

  inline Events& operator=(const Events& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Events& default_instance();

  void Swap(Events* other);

  // implements Message ----------------------------------------------

  Events* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Events& from);
  void MergeFrom(const Events& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Events_Event Event;

  // accessors -------------------------------------------------------

  // required int32 count = 1;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 1;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // repeated .company.Events.Event events = 4;
  inline int events_size() const;
  inline void clear_events();
  static const int kEventsFieldNumber = 4;
  inline const ::company::Events_Event& events(int index) const;
  inline ::company::Events_Event* mutable_events(int index);
  inline ::company::Events_Event* add_events();
  inline const ::google::protobuf::RepeatedPtrField< ::company::Events_Event >&
      events() const;
  inline ::google::protobuf::RepeatedPtrField< ::company::Events_Event >*
      mutable_events();

  // @@protoc_insertion_point(class_scope:company.Events)
 private:
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::company::Events_Event > events_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_log_2eproto();
  friend void protobuf_AssignDesc_log_2eproto();
  friend void protobuf_ShutdownFile_log_2eproto();

  void InitAsDefaultInstance();
  static Events* default_instance_;
};
// ===================================================================


// ===================================================================

// Events_Event

// required int64 timestamp = 1;
inline bool Events_Event::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Events_Event::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Events_Event::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Events_Event::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 Events_Event::timestamp() const {
  return timestamp_;
}
inline void Events_Event::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// required int64 userId = 2;
inline bool Events_Event::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Events_Event::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Events_Event::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Events_Event::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::int64 Events_Event::userid() const {
  return userid_;
}
inline void Events_Event::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
}

// required string event = 3;
inline bool Events_Event::has_event() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Events_Event::set_has_event() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Events_Event::clear_has_event() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Events_Event::clear_event() {
  if (event_ != &::google::protobuf::internal::kEmptyString) {
    event_->clear();
  }
  clear_has_event();
}
inline const ::std::string& Events_Event::event() const {
  return *event_;
}
inline void Events_Event::set_event(const ::std::string& value) {
  set_has_event();
  if (event_ == &::google::protobuf::internal::kEmptyString) {
    event_ = new ::std::string;
  }
  event_->assign(value);
}
inline void Events_Event::set_event(const char* value) {
  set_has_event();
  if (event_ == &::google::protobuf::internal::kEmptyString) {
    event_ = new ::std::string;
  }
  event_->assign(value);
}
inline void Events_Event::set_event(const char* value, size_t size) {
  set_has_event();
  if (event_ == &::google::protobuf::internal::kEmptyString) {
    event_ = new ::std::string;
  }
  event_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Events_Event::mutable_event() {
  set_has_event();
  if (event_ == &::google::protobuf::internal::kEmptyString) {
    event_ = new ::std::string;
  }
  return event_;
}
inline ::std::string* Events_Event::release_event() {
  clear_has_event();
  if (event_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = event_;
    event_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Events_Event::set_allocated_event(::std::string* event) {
  if (event_ != &::google::protobuf::internal::kEmptyString) {
    delete event_;
  }
  if (event) {
    set_has_event();
    event_ = event;
  } else {
    clear_has_event();
    event_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Events

// required int32 count = 1;
inline bool Events::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Events::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Events::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Events::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 Events::count() const {
  return count_;
}
inline void Events::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// repeated .company.Events.Event events = 4;
inline int Events::events_size() const {
  return events_.size();
}
inline void Events::clear_events() {
  events_.Clear();
}
inline const ::company::Events_Event& Events::events(int index) const {
  return events_.Get(index);
}
inline ::company::Events_Event* Events::mutable_events(int index) {
  return events_.Mutable(index);
}
inline ::company::Events_Event* Events::add_events() {
  return events_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::company::Events_Event >&
Events::events() const {
  return events_;
}
inline ::google::protobuf::RepeatedPtrField< ::company::Events_Event >*
Events::mutable_events() {
  return &events_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace company

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_log_2eproto__INCLUDED
