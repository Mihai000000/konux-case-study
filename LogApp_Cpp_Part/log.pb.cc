// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: log.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "log.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace company {

namespace {

const ::google::protobuf::Descriptor* Events_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Events_reflection_ = NULL;
const ::google::protobuf::Descriptor* Events_Event_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Events_Event_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_log_2eproto() {
  protobuf_AddDesc_log_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "log.proto");
  GOOGLE_CHECK(file != NULL);
  Events_descriptor_ = file->message_type(0);
  static const int Events_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Events, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Events, events_),
  };
  Events_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Events_descriptor_,
      Events::default_instance_,
      Events_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Events, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Events, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Events));
  Events_Event_descriptor_ = Events_descriptor_->nested_type(0);
  static const int Events_Event_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Events_Event, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Events_Event, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Events_Event, event_),
  };
  Events_Event_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Events_Event_descriptor_,
      Events_Event::default_instance_,
      Events_Event_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Events_Event, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Events_Event, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Events_Event));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_log_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Events_descriptor_, &Events::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Events_Event_descriptor_, &Events_Event::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_log_2eproto() {
  delete Events::default_instance_;
  delete Events_reflection_;
  delete Events_Event::default_instance_;
  delete Events_Event_reflection_;
}

void protobuf_AddDesc_log_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tlog.proto\022\007company\"y\n\006Events\022\r\n\005count\030"
    "\001 \002(\005\022%\n\006events\030\004 \003(\0132\025.company.Events.E"
    "vent\0329\n\005Event\022\021\n\ttimestamp\030\001 \002(\003\022\016\n\006user"
    "Id\030\002 \002(\003\022\r\n\005event\030\003 \002(\tB\030\n\013com.companyB\t"
    "LogEvents", 169);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "log.proto", &protobuf_RegisterTypes);
  Events::default_instance_ = new Events();
  Events_Event::default_instance_ = new Events_Event();
  Events::default_instance_->InitAsDefaultInstance();
  Events_Event::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_log_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_log_2eproto {
  StaticDescriptorInitializer_log_2eproto() {
    protobuf_AddDesc_log_2eproto();
  }
} static_descriptor_initializer_log_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Events_Event::kTimestampFieldNumber;
const int Events_Event::kUserIdFieldNumber;
const int Events_Event::kEventFieldNumber;
#endif  // !_MSC_VER

Events_Event::Events_Event()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Events_Event::InitAsDefaultInstance() {
}

Events_Event::Events_Event(const Events_Event& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Events_Event::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  userid_ = GOOGLE_LONGLONG(0);
  event_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Events_Event::~Events_Event() {
  SharedDtor();
}

void Events_Event::SharedDtor() {
  if (event_ != &::google::protobuf::internal::kEmptyString) {
    delete event_;
  }
  if (this != default_instance_) {
  }
}

void Events_Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Events_Event::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Events_Event_descriptor_;
}

const Events_Event& Events_Event::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();
  return *default_instance_;
}

Events_Event* Events_Event::default_instance_ = NULL;

Events_Event* Events_Event::New() const {
  return new Events_Event;
}

void Events_Event::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = GOOGLE_LONGLONG(0);
    userid_ = GOOGLE_LONGLONG(0);
    if (has_event()) {
      if (event_ != &::google::protobuf::internal::kEmptyString) {
        event_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Events_Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userId;
        break;
      }

      // required int64 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_event;
        break;
      }

      // required string event = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->event().data(), this->event().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Events_Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // required int64 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->userid(), output);
  }

  // required string event = 3;
  if (has_event()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event().data(), this->event().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->event(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Events_Event::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // required int64 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->userid(), target);
  }

  // required string event = 3;
  if (has_event()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event().data(), this->event().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->event(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Events_Event::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // required int64 userId = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->userid());
    }

    // required string event = 3;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Events_Event::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Events_Event* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Events_Event*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Events_Event::MergeFrom(const Events_Event& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_event()) {
      set_event(from.event());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Events_Event::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Events_Event::CopyFrom(const Events_Event& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Events_Event::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Events_Event::Swap(Events_Event* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(userid_, other->userid_);
    std::swap(event_, other->event_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Events_Event::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Events_Event_descriptor_;
  metadata.reflection = Events_Event_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Events::kCountFieldNumber;
const int Events::kEventsFieldNumber;
#endif  // !_MSC_VER

Events::Events()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Events::InitAsDefaultInstance() {
}

Events::Events(const Events& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Events::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Events::~Events() {
  SharedDtor();
}

void Events::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Events::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Events::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Events_descriptor_;
}

const Events& Events::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_2eproto();
  return *default_instance_;
}

Events* Events::default_instance_ = NULL;

Events* Events::New() const {
  return new Events;
}

void Events::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0;
  }
  events_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Events::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_events;
        break;
      }

      // repeated .company.Events.Event events = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_events()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_events;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Events::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  // repeated .company.Events.Event events = 4;
  for (int i = 0; i < this->events_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->events(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Events::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  // repeated .company.Events.Event events = 4;
  for (int i = 0; i < this->events_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->events(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Events::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  // repeated .company.Events.Event events = 4;
  total_size += 1 * this->events_size();
  for (int i = 0; i < this->events_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->events(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Events::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Events* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Events*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Events::MergeFrom(const Events& from) {
  GOOGLE_CHECK_NE(&from, this);
  events_.MergeFrom(from.events_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Events::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Events::CopyFrom(const Events& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Events::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < events_size(); i++) {
    if (!this->events(i).IsInitialized()) return false;
  }
  return true;
}

void Events::Swap(Events* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    events_.Swap(&other->events_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Events::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Events_descriptor_;
  metadata.reflection = Events_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace company

// @@protoc_insertion_point(global_scope)
